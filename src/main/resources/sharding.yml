schemaName: ecommerce

dataSources:
  ds0_master:
    url: jdbc:mysql://mysql-ds-master:3306/ds0?serverTimezone=UTC&useSSL=false
    username: app_user
    password: app_pass
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver

  ds0_slave:
    url: jdbc:mysql://mysql-ds-slave:3306/ds0?serverTimezone=UTC&useSSL=false
    username: app_user
    password: app_pass
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver

  ds1_master:
    url: jdbc:mysql://mysql-ds-master:3306/ds1?serverTimezone=UTC&useSSL=false
    username: app_user
    password: app_pass
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver

  ds1_slave:
    url: jdbc:mysql://mysql-ds-slave:3306/ds1?serverTimezone=UTC&useSSL=false
    username: app_user
    password: app_pass
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver

  product_master:
    url:  jdbc:mysql://mysql-ds-master:3306/product_db?…
    username: app_user
    password: app_pass
    driverClassName: com.mysql.cj.jdbc.Driver
    type: com.zaxxer.hikari.HikariDataSource

  product_slave:
    url:  jdbc:mysql://mysql-ds-slave:3306/product_db?…
    username: app_user
    password: app_pass
    driverClassName: com.mysql.cj.jdbc.Driver
    type: com.zaxxer.hikari.HikariDataSource

rules:
  - !READWRITE_SPLITTING
    dataSources:
      ds0:
        staticStrategy:
          writeDataSourceName: ds0_master
          readDataSourceNames: [ ds0_slave ]
        loadBalancerName: round_robin
      ds1:
        staticStrategy:
          writeDataSourceName: ds1_master
          readDataSourceNames: [ ds1_slave ]
        loadBalancerName: round_robin
      product:
        staticStrategy:
          writeDataSourceName: product_master
          readDataSourceNames: [ product_slave ]
    loadBalancers:
      round_robin:
        type: ROUND_ROBIN

  - !SHARDING
    tables:
      order:
        actualDataNodes: ds$->{0..1}.order_$->{0..1}
        tableStrategy:
          standard:
            shardingColumn: id
            shardingAlgorithmName: order_inline_table
        databaseStrategy:
          standard:
            shardingColumn: id
            shardingAlgorithmName: order_inline_db
        keyGenerateStrategy:
          column: id
          keyGeneratorName: snowflake
      order_item:
        actualDataNodes: ds$->{0..1}.order_item_$->{0..1}
        tableStrategy:
          standard:
            shardingColumn: order_id
            shardingAlgorithmName: order_item_table_inline
        databaseStrategy:
          standard:
            shardingColumn: order_id
            shardingAlgorithmName: order_inline_db
        keyGenerateStrategy:
          column: id
          keyGeneratorName: snowflake

    defaultDatabaseStrategy:
      none:
    defaultTableStrategy:
      none:
    shardingAlgorithms:
      order_inline_db:
        type: INLINE
        props:
          algorithm-expression: ds$->{user_id % 2}
      order_inline_table:
        type: INLINE
        props:
          algorithm-expression: order_$->{user_id % 2}
      order_item_table_inline:
        type: INLINE
        props:
          algorithm-expression: order_item_$->{user_id % 2}
    keyGenerators:
      snowflake:
        type: SNOWFLAKE
        props:
          worker-id: ${WORKER_ID:1}

props:
  sql-show: true
  check-table-metadata-enabled: false
